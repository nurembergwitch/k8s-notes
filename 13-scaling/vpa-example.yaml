# note: you need to deploy a metrics server for this to work. Refer to k3s.md to see how to deploy the bitnami one with helm (helm install metrics bitnami/metrics-server -f metrics.yaml)
# you also need to install the VPA: git clone https://github.com/kubernetes/autoscaler.git, https://github.com/kubernetes/autoscaler/blob/master/vertical-pod-autoscaler/README.md 
# re: recommendations. They can be viewed with kc describe vpa <name>. Pods controlled by the vpa also get extra annotations in their descriptions.
# vpa can be effectively used with statefulsets, dbs, and cronjobs.
# don't use simultaneously with hpa, unless hpa is using only custom metrics.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: some-app
  namespace: default
spec:
  selector:
    matchLabels:
      app: some-app
  replicas: 1
  template:
    metadata:
      labels:
        app: some-app
    spec:
      containers:
        - name: some-app
          image: k8s.gcr.io/ubuntu-slim:0.1
          resources:
            requests:
              cpu: 180m
              memory: 50Mi
            limits:
              cpu: 600m
              memory: 100Mi
          command: ["/bin/sh"]
          args:
            - "-c"
            - "while true; do timeout 0.2s yes >/dev/null; sleep 0.5s; done"
---
# https://habr.com/ru/companies/flant/articles/541642/
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: vpa-1
  namespace: default
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: some-app
  updatePolicy:
    updateMode: "Off" # get the recommendations, but not auto-apply them. other options: Initial, Recreate, Auto. Scroll up to see what to do with recommendations.
  resourcePolicy:
    containerPolicies:
      - containerName: '*'
        minAllowed: # if not specified, there is no min/max limit
          cpu: 0m
          memory: 0Mi
        maxAllowed:
          cpu: 1
          memory: 500Mi
        controlledResources: ["cpu", "memory"]
        controlledValues: RequestsAndLimits # other option: RequestsOnly
---
# simple auto vpa
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: vpa-simple
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: Deployment
    name: some-app
  updatePolicy: 
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: "*"
        controlledResources: ["cpu", "memory"]

--- 
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: my-app-vpa
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind:       Deployment
    name:       my-app
  updatePolicy:
    updateMode: "Auto"